@startuml thread_pool


class WQueue <typename T, class WPQueue>
{
    - m_container: WPQueue
    - m_mutex: TimedMutex
    - m_cv: ConditionVariable

    + void Pop(out_p: T*)
    + Pop(out_p: T*, timeToWait: const std::chrono::milliseconds&) : wqueue_status
    + void Push(val: const T&)
    + bool IsEmpty(): bool
}

class TimedMutex
{
    
}

class ConditionVariable
{
    
}

enum wqueue_status
{
    SUCCESS
    TIME_OUT_EMPTY
    TIME_OUT_LOCK
}

' class WPQueue : private std::priority_queue<T, Container, Compare>
' {
' public:
'     const T& front() const;
' 	void pop_front();
'     void push_back(const T& val);
'     using std::priority_queue<T, Container, Compare>::empty;
' private:
'     using std::priority_queue<T, Container, Compare>::top;
'     using std::priority_queue<T, Container, Compare>::pop;
'     using std::priority_queue<T, Container, Compare>::push;
' };

/' realtions '/
WQueue *-- TimedMutex
WQueue *-- ConditionVariable





@enduml
